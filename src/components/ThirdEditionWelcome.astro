---
interface ImageSlide {
  src: string
  srcset?: string
  alt: string
}

interface Props {
  heading: string
  bodyHtml: string
  images: ImageSlide[]
}

const { heading, bodyHtml, images }: Props = Astro.props
---

<div class="mx-auto max-w-3xl px-4 py-16">
  <h1 class="font-justme mb-6 text-center text-3xl md:text-4xl">{heading}</h1>
  <div class="prose prose-lg mx-auto mb-10 text-gray-800" set:html={bodyHtml} />
  <div class="flex w-full justify-center">
    <div class="w-full max-w-2xl">
      <div class="relative overflow-hidden rounded-lg">
        <button
          id="carousel-left"
          type="button"
          aria-label="Previous image"
          class="absolute top-1/2 left-2 z-10 -translate-y-1/2 rounded-full bg-white/80 p-2 shadow transition hover:bg-white"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-6 w-6"
            ><path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5"></path></svg
          >
        </button>
        <img
          id="carousel-image"
          src={images[0].src}
          srcset={images[0].srcset}
          alt={images[0].alt}
          class="mx-auto h-72 w-auto rounded-lg object-contain transition-all duration-300"
          loading="lazy"
        />
        <button
          id="carousel-right"
          type="button"
          aria-label="Next image"
          class="absolute top-1/2 right-2 z-10 -translate-y-1/2 rounded-full bg-white/80 p-2 shadow transition hover:bg-white"
        >
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="h-6 w-6"
            ><path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5"></path></svg
          >
        </button>
        <div class="mt-3 flex justify-center gap-2">
          {images.map((_, i) => <span class="inline-block h-2 w-2 rounded-full bg-gray-300" id={`carousel-dot-${i}`} />)}
        </div>
      </div>
    </div>
  </div>
</div>

<script is:inline define:vars={{ images }}>
  let current = 0
  const img = document.getElementById('carousel-image')
  const left = document.getElementById('carousel-left')
  const right = document.getElementById('carousel-right')
  const dots = images.map((_, i) => document.getElementById(`carousel-dot-${i}`))

  let autoPlayInterval = null
  let autoPlayTimeout = null
  const AUTO_PLAY_DELAY = 3000 // 3s
  const AUTO_PLAY_RESUME = 2000 // 2s after interaction

  function update() {
    img.src = images[current].src
    img.srcset = images[current].srcset || ''
    img.alt = images[current].alt
    dots.forEach((dot, i) => {
      if (dot) dot.classList.toggle('bg-gray-800', i === current)
      if (dot) dot.classList.toggle('bg-gray-300', i !== current)
    })
  }

  function next() {
    current = (current + 1) % images.length
    update()
  }
  function prev() {
    current = (current - 1 + images.length) % images.length
    update()
  }

  function startAutoPlay() {
    if (autoPlayInterval) clearInterval(autoPlayInterval)
    autoPlayInterval = setInterval(() => {
      next()
    }, AUTO_PLAY_DELAY)
  }

  function pauseAutoPlayAndResume() {
    if (autoPlayInterval) clearInterval(autoPlayInterval)
    if (autoPlayTimeout) clearTimeout(autoPlayTimeout)
    autoPlayTimeout = setTimeout(() => {
      startAutoPlay()
    }, AUTO_PLAY_RESUME)
  }

  left.addEventListener('click', () => {
    prev()
    pauseAutoPlayAndResume()
  })
  right.addEventListener('click', () => {
    next()
    pauseAutoPlayAndResume()
  })
  // Dots click
  dots.forEach((dot, i) => {
    if (dot)
      dot.addEventListener('click', () => {
        current = i
        update()
        pauseAutoPlayAndResume()
      })
  })
  // Initial
  update()
  startAutoPlay()
</script>
