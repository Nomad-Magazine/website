---
interface Feature {
  text: string
}

interface Plan {
  id: string
  title: string
  subtitle: string
  features: Feature[]
  price: string
  priceNote?: string
  url: string
  defaultUrl?: string
  defaultChecked?: boolean
  disabled?: boolean
}

interface Props {
  issueNumber: string
  issueDescription: string
  digitalPlans: Plan[]
  printPlan: Plan
  orderButtonText?: string
  disclaimerText?: string
}

const {
  issueNumber,
  issueDescription,
  digitalPlans,
  printPlan,
  orderButtonText = 'Read Now!',
  disclaimerText = 'While the digital version works on both mobile and desktop, we recommend the desktop for a more enjoyable reading experience.<br />All payments will be securely processed through MediaPath OÜ, the business entity of Nomad Gossip Magazine.',
}: Props = Astro.props

import CheckIcon from '~icons/ic/baseline-check'

// Generate unique IDs for this instance
const instanceId = `payment-plan-${Math.random().toString(36).substring(2, 9)}`
const digitalRadioId = `${instanceId}-digital-radio`
const printRadioId = `${instanceId}-print-radio`
const orderBtnId = `${instanceId}-order-now-btn`
const plansRowId = `${instanceId}-plans-row`

// Get default digital plan (first one that's defaultChecked, or first one)
const defaultDigitalPlan = digitalPlans.find((plan) => plan.defaultChecked) || digitalPlans[0]
---
<div class="w-full px-8 lg:max-w-md lg:px-0">
  <div class="font-justme mb-2 text-3xl font-medium">{issueNumber}</div>
  <div class="mb-4 text-gray-700">{issueDescription}</div>

  <!-- Publication Type Selection -->
  <div class="mb-2 font-semibold">Type of publication</div>
  <div class="mb-4 flex gap-4">
    <label class="flex cursor-pointer items-center">
      <input id={digitalRadioId} type="radio" name={`type-${instanceId}`} value="digital" checked class="mr-2 accent-black" />
      <span class="flex items-center">
        Digital version
        <span class="ml-2 rounded bg-green-100 px-2 py-1 text-xs font-medium text-green-800">Recommended</span>
      </span>
    </label>
    <label class="flex cursor-pointer items-center">
      <input id={printRadioId} type="radio" name={`type-${instanceId}`} value="print" class="mr-2 accent-black" />
      Print
    </label>
  </div>

  <!-- Payment Plans -->
  <div id={plansRowId} class="grid grid-cols-1 gap-4">
    <!-- Digital Plans -->
    {
      digitalPlans.map((plan, index) => (
        <div
          id={`${instanceId}-${plan.id}-block`}
          class="group relative flex-1 cursor-pointer rounded-lg border p-4 select-none"
          style={index === 0 ? 'display: block;' : 'display: block;'}
        >
          <div class="flex h-full min-h-[120px] flex-col justify-between">
            <div>
              <div class="mb-1 font-bold">{plan.title}</div>
              <div class="mb-2 text-sm">{plan.subtitle}</div>
              <ul class="mb-2 text-sm text-gray-400">
                {plan.features.map((feature) => (
                  <li class="mb-2 flex items-center">
                    <CheckIcon class="mr-2 size-5 flex-shrink-0" />
                    {feature.text}
                  </li>
                ))}
              </ul>
            </div>
            <div class="mt-8 flex items-end justify-between">
              <span class="font-justme text-3xl">{plan.price}</span>
              {plan.priceNote && <span class="ml-2 text-xs text-gray-500">{plan.priceNote}</span>}
              <span class="relative">
                <input
                  id={`${instanceId}-${plan.id}-checkbox`}
                  type="checkbox"
                  name={`plan-${instanceId}`}
                  class="peer absolute h-10 w-10 cursor-pointer opacity-0"
                  tabindex="0"
                  checked={plan.defaultChecked}
                  disabled={plan.disabled}
                />
                <span class="flex h-10 w-10 items-center justify-center border-2 border-black bg-white transition-colors duration-150 peer-checked:bg-black">
                  <CheckIcon class="size-6 flex-shrink-0 text-white" />
                </span>
              </span>
            </div>
          </div>
          <span class="absolute inset-0" aria-hidden="true" />
        </div>
      ))
    }

    <!-- Print Plan (hidden by default) -->
    <div id={`${instanceId}-print-plan`} class="group relative flex-1 rounded-lg border p-4 select-none" style="display: none;">
      <div class="flex h-full min-h-[120px] flex-col justify-between">
        <div>
          <div class="mb-1 font-bold">{printPlan.title}</div>
          <div class="mb-2 text-sm">{printPlan.subtitle}</div>
          <ul class="mb-2 text-sm text-gray-400">
            {
              printPlan.features.map((feature) => (
                <li class="mb-2 flex items-center">
                  <CheckIcon class="mr-2 size-5 flex-shrink-0" />
                  {feature.text}
                </li>
              ))
            }
          </ul>
        </div>
        <!-- Delivery Method Selector -->
        <div class="mb-4 mt-2">
          <label class="block text-lg font-semibold mb-2 text-gray-900">Delivery method:</label>
          <div class="flex gap-6">
            <label class="flex items-center cursor-pointer">
              <input type="radio" name="delivery-method" value="pickup" class="mr-2 accent-black" id="pickup-radio" tabindex="0" checked />
              Pick up in person <span class="ml-2 text-base font-bold text-green-700">€20</span>
            </label>
            <label class="flex items-center cursor-pointer">
              <input type="radio" name="delivery-method" value="delivery" class="mr-2 accent-black" id="delivery-radio" tabindex="0" />
              Delivery <span class="ml-2 text-base font-bold text-blue-700">€32</span>
            </label>
          </div>
        </div>
        <!-- Pickup city dropdown (hidden by default) -->
        <div id="pickup-city-group" class="mb-4">
          <label class="block mb-1 text-sm font-semibold">Select your pickup city</label>
          <select id="pickup-city" class="w-full rounded border px-3 py-2">
            <option value="Amsterdam">Amsterdam</option>
            <option value="Barcelona">Barcelona</option>
            <option value="Berlin">Berlin</option>
            <option value="Lisbon">Lisbon</option>
            <option value="Madeira">Madeira</option>
            <option value="Bansko">Bansko</option>
          </select>
        </div>
        <div class="mt-8 flex items-end justify-between">
          <span id="print-price" class="font-justme text-3xl">€20</span>
          <span class="ml-2 text-xs text-gray-500">{printPlan.priceNote}</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Order Button -->
  <a
    id={orderBtnId}
    href={defaultDigitalPlan.url}
    target="_blank"
    class="mt-8 block w-full rounded bg-black px-6 py-3 text-center text-lg font-semibold text-white transition hover:bg-gray-800"
  >
    {orderButtonText}
  </a>

  <!-- Disclaimer -->
  <div class="mt-2 text-xs text-gray-500" set:html={disclaimerText} />
</div>

<script 
  is:inline
  define:vars={{
    instanceId,
    digitalRadioId,
    printRadioId,
    orderBtnId,
    digitalPlans,
    printPlan,
  }}
>
document.addEventListener('DOMContentLoaded', function () {
  // Get main control elements
  var digitalRadio = document.getElementById(digitalRadioId);
  var printRadio = document.getElementById(printRadioId);
  var printPlanElement = document.getElementById(instanceId + '-print-plan');
  var orderBtn = document.getElementById(orderBtnId);
  
  // Get digital plan blocks
  var digitalPlanBlocks = [];
  digitalPlans.forEach(function(plan) {
    var block = document.getElementById(instanceId + '-' + plan.id + '-block');
    if (block) digitalPlanBlocks.push(block);
  });

  function showPlan(type) {
    if (type === 'digital') {
      // Show digital plans
      digitalPlanBlocks.forEach(function(block) {
        if (block) block.style.display = 'block';
      });
      // Hide print plan
      if (printPlanElement) printPlanElement.style.display = 'none';
    } else if (type === 'print') {
      // Hide digital plans
      digitalPlanBlocks.forEach(function(block) {
        if (block) block.style.display = 'none';
      });
      // Show print plan
      if (printPlanElement) printPlanElement.style.display = 'block';
      // Update print UI
      updatePrintUI();
    }
  }

  // Digital/Print radio listeners
  if (digitalRadio && printRadio) {
    digitalRadio.addEventListener('change', function() {
      if (digitalRadio.checked) {
        showPlan('digital');
      }
    });
    printRadio.addEventListener('change', function() {
      if (printRadio.checked) {
        showPlan('print');
      }
    });
  }

  // Pickup/Delivery logic for print plan
  var pickupLinks = {
    'Amsterdam': 'https://pay.nomad-magazine.com/b/7sY5kD1nT3jlbkGdWh8bS0k',
    'Barcelona': 'https://pay.nomad-magazine.com/b/bJe5kD4A50791K605r8bS0l',
    'Berlin': 'https://pay.nomad-magazine.com/b/28EbJ14A5cTVgF09G18bS0m',
    'Lisbon': 'https://pay.nomad-magazine.com/b/aFa3cvaYt4np88uaK58bS0n',
    'Madeira': 'https://pay.nomad-magazine.com/b/4gM9ATaYt7zB74q6tP8bS0o',
    'Bansko': 'https://pay.nomad-magazine.com/b/28E00jd6BaLNgF0f0l8bS0p'
  };

  var pickupRadio = document.getElementById('pickup-radio');
  var deliveryRadio = document.getElementById('delivery-radio');
  var pickupCityGroup = document.getElementById('pickup-city-group');
  var printPrice = document.getElementById('print-price');
  var pickupCity = document.getElementById('pickup-city');

  function updatePrintUI() {
    if (pickupRadio && pickupRadio.checked) {
      if (printPrice) printPrice.textContent = '€20';
      if (pickupCityGroup) pickupCityGroup.style.display = '';
      var city = pickupCity ? pickupCity.value : 'Amsterdam';
      var link = pickupLinks[city] || pickupLinks['Amsterdam'];
      if (orderBtn) orderBtn.setAttribute('href', link);
    } else if (deliveryRadio && deliveryRadio.checked) {
      var deliveryUrl = 'https://pay.nomad-magazine.com/b/28EeVdaYt1bd0G24lH8bS0g';
      if (printPrice) printPrice.textContent = '€32';
      if (pickupCityGroup) pickupCityGroup.style.display = 'none';
      if (orderBtn) orderBtn.setAttribute('href', deliveryUrl);
    }
  }

  if (pickupRadio && deliveryRadio) {
    pickupRadio.addEventListener('change', function() {
      updatePrintUI();
    });
    deliveryRadio.addEventListener('change', function() {
      updatePrintUI();
    });
    if (pickupCity) {
      pickupCity.addEventListener('change', function() {
        if (pickupRadio && pickupRadio.checked) {
          updatePrintUI();
        }
      });
    }
    updatePrintUI();
  }

  // Initialize with digital plan by default
  showPlan('digital');
});
</script>
