---
interface Feature {
  text: string
}

interface Plan {
  id: string
  title: string
  subtitle: string
  features: Feature[]
  price: string
  priceNote?: string
  url: string
  defaultUrl?: string
  defaultChecked?: boolean
  disabled?: boolean
}

interface Props {
  issueNumber: string
  issueDescription: string
  digitalPlans: Plan[]
  printPlan: Plan
  orderButtonText?: string
  disclaimerText?: string
}

const {
  issueNumber,
  issueDescription,
  digitalPlans,
  printPlan,
  orderButtonText = 'Read Now!',
  disclaimerText = 'While the digital version works on both mobile and desktop, we recommend the desktop for a more enjoyable reading experience.<br />All payments will be securely processed through MediaPath OÃœ, the business entity of Nomad Gossip Magazine.',
}: Props = Astro.props

import CheckIcon from '~icons/ic/baseline-check'

// Generate unique IDs for this instance
const instanceId = `payment-plan-${Math.random().toString(36).substring(2, 9)}`
const digitalRadioId = `${instanceId}-digital-radio`
const printRadioId = `${instanceId}-print-radio`
const orderBtnId = `${instanceId}-order-now-btn`
const plansRowId = `${instanceId}-plans-row`

// Get default digital plan (first one that's defaultChecked, or first one)
const defaultDigitalPlan = digitalPlans.find((plan) => plan.defaultChecked) || digitalPlans[0]
---

<div class="w-full px-8 lg:max-w-md lg:px-0">
  <div class="font-justme mb-2 text-3xl font-medium">{issueNumber}</div>
  <div class="mb-4 text-gray-700">{issueDescription}</div>

  <!-- Publication Type Selection -->
  <div class="mb-2 font-semibold">Type of publication</div>
  <div class="mb-4 flex gap-4">
    <label class="flex cursor-pointer items-center">
      <input id={digitalRadioId} type="radio" name={`type-${instanceId}`} value="digital" checked class="mr-2 accent-black" />
      <span class="flex items-center">
        Digital version
        <span class="ml-2 rounded bg-green-100 px-2 py-1 text-xs font-medium text-green-800">Recommended</span>
      </span>
    </label>
    <label class="flex cursor-pointer items-center">
      <input id={printRadioId} type="radio" name={`type-${instanceId}`} value="print" class="mr-2 accent-black" />
      Print
    </label>
  </div>

  <!-- Payment Plans -->
  <div class="mb-2 text-center text-xl font-semibold">Choose a payment plan</div>
  <div id={plansRowId} class="grid grid-cols-1 gap-4">
    <!-- Digital Plans -->
    {
      digitalPlans.map((plan, index) => (
        <div
          id={`${instanceId}-${plan.id}-block`}
          class="group relative flex-1 cursor-pointer rounded-lg border p-4 select-none"
          style={index === 0 ? 'display: block;' : 'display: block;'}
        >
          <div class="flex h-full min-h-[120px] flex-col justify-between">
            <div>
              <div class="mb-1 font-bold">{plan.title}</div>
              <div class="mb-2 text-sm">{plan.subtitle}</div>
              <ul class="mb-2 text-sm text-gray-400">
                {plan.features.map((feature) => (
                  <li class="mb-2 flex items-center">
                    <CheckIcon class="mr-2 size-5 flex-shrink-0" />
                    {feature.text}
                  </li>
                ))}
              </ul>
            </div>
            <div class="mt-8 flex items-end justify-between">
              <span class="font-justme text-3xl">{plan.price}</span>
              {plan.priceNote && <span class="ml-2 text-xs text-gray-500">{plan.priceNote}</span>}
              <span class="relative">
                <input
                  id={`${instanceId}-${plan.id}-checkbox`}
                  type="checkbox"
                  name={`plan-${instanceId}`}
                  class="peer absolute h-10 w-10 cursor-pointer opacity-0"
                  tabindex="0"
                  checked={plan.defaultChecked}
                  disabled={plan.disabled}
                />
                <span class="flex h-10 w-10 items-center justify-center border-2 border-black bg-white transition-colors duration-150 peer-checked:bg-black">
                  <CheckIcon class="size-6 flex-shrink-0 text-white" />
                </span>
              </span>
            </div>
          </div>
          <span class="absolute inset-0" aria-hidden="true" />
        </div>
      ))
    }

    <!-- Print Plan (hidden by default) -->
    <div id={`${instanceId}-print-plan`} class="group relative flex-1 cursor-pointer rounded-lg border p-4 select-none" style="display: none;">
      <div class="flex h-full min-h-[120px] flex-col justify-between">
        <div>
          <div class="mb-1 font-bold">{printPlan.title}</div>
          <div class="mb-2 text-sm">{printPlan.subtitle}</div>
          <ul class="mb-2 text-sm text-gray-400">
            {
              printPlan.features.map((feature) => (
                <li class="mb-2 flex items-center">
                  <CheckIcon class="mr-2 size-5 flex-shrink-0" />
                  {feature.text}
                </li>
              ))
            }
          </ul>
        </div>
        <div class="mt-8 flex items-end justify-between">
          <span class="font-justme text-3xl">{printPlan.price}</span>
          {printPlan.priceNote && <span class="ml-2 text-xs text-gray-500">{printPlan.priceNote}</span>}
          <span class="relative">
            <input type="checkbox" checked disabled class="absolute h-10 w-10 opacity-0" tabindex="-1" />
            <span class="flex h-10 w-10 items-center justify-center border-2 border-black bg-black">
              <CheckIcon class="size-6 flex-shrink-0 text-white" />
            </span>
          </span>
        </div>
      </div>
      <span class="absolute inset-0" aria-hidden="true"></span>
    </div>
  </div>

  <!-- Order Button -->
  <a
    id={orderBtnId}
    href={defaultDigitalPlan.url}
    target="_blank"
    class="mt-8 block w-full rounded bg-black px-6 py-3 text-center text-lg font-semibold text-white transition hover:bg-gray-800"
  >
    {orderButtonText}
  </a>

  <!-- Disclaimer -->
  <div class="mt-2 text-xs text-gray-500" set:html={disclaimerText} />
</div>

<script
  is:inline
  define:vars={{
    instanceId,
    digitalRadioId,
    printRadioId,
    orderBtnId,
    plansRowId,
    digitalPlans,
    printPlan,
  }}
>
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    // Get all elements
    const orderBtn = document.getElementById(orderBtnId)
    const digitalRadio = document.getElementById(digitalRadioId)
    const printRadio = document.getElementById(printRadioId)
    const printPlanElement = document.getElementById(`${instanceId}-print-plan`)

    // Get digital plan elements
    const digitalPlanBlocks = digitalPlans.map((plan) => ({
      ...plan,
      block: document.getElementById(`${instanceId}-${plan.id}-block`),
      checkbox: document.getElementById(`${instanceId}-${plan.id}-checkbox`),
    }))

    // Get default plan
    const defaultPlan = digitalPlanBlocks.find((plan) => plan.defaultChecked) || digitalPlanBlocks[0]

    function showPlan(type) {
      if (type === 'digital') {
        // Show all digital plans
        digitalPlanBlocks.forEach((plan) => {
          if (plan.block) plan.block.style.display = 'block'
          if (plan.checkbox) plan.checkbox.disabled = false
        })

        // Hide print plan
        if (printPlanElement) printPlanElement.style.display = 'none'

        // Update order button URL
        const selectedPlan = digitalPlanBlocks.find((plan) => plan.checkbox && plan.checkbox.checked)
        if (orderBtn && selectedPlan) {
          orderBtn.setAttribute('href', selectedPlan.url)
        } else if (orderBtn && defaultPlan) {
          // Use defaultUrl if no plan is selected, otherwise use the plan's url
          orderBtn.setAttribute('href', defaultPlan.defaultUrl || defaultPlan.url)
        }
      } else {
        // Hide all digital plans
        digitalPlanBlocks.forEach((plan) => {
          if (plan.block) plan.block.style.display = 'none'
          if (plan.checkbox) {
            plan.checkbox.disabled = true
            plan.checkbox.checked = false
          }
        })

        // Show print plan
        if (printPlanElement) printPlanElement.style.display = 'block'

        // Update order button URL
        if (orderBtn) orderBtn.setAttribute('href', printPlan.url)
      }
    }

    // Radio button event listeners
    if (digitalRadio && printRadio) {
      digitalRadio.addEventListener('change', () => {
        showPlan('digital')
        // Set default plan as checked
        if (defaultPlan.checkbox) {
          defaultPlan.checkbox.checked = true
          if (orderBtn) orderBtn.setAttribute('href', defaultPlan.url)
        }
      })

      printRadio.addEventListener('change', () => {
        showPlan('print')
      })
    }

    // Checkbox event listeners for digital plans
    digitalPlanBlocks.forEach((plan) => {
      if (plan.checkbox) {
        plan.checkbox.addEventListener('change', () => {
          if (plan.checkbox.checked) {
            // Uncheck other plans
            digitalPlanBlocks.forEach((otherPlan) => {
              if (otherPlan.checkbox && otherPlan.id !== plan.id) {
                otherPlan.checkbox.checked = false
              }
            })
            // Update order button URL
            if (orderBtn) orderBtn.setAttribute('href', plan.url)
          } else if (!digitalPlanBlocks.some((p) => p.checkbox && p.checkbox.checked)) {
            // If no plan is checked, use defaultUrl or default plan
            if (defaultPlan.checkbox) {
              defaultPlan.checkbox.checked = true
              if (orderBtn) orderBtn.setAttribute('href', defaultPlan.url)
            } else if (orderBtn && defaultPlan) {
              // Use defaultUrl if no plan is selected
              orderBtn.setAttribute('href', defaultPlan.defaultUrl || defaultPlan.url)
            }
          }
        })
      }

      // Block click logic
      if (plan.block) {
        plan.block.addEventListener('click', (e) => {
          if (digitalRadio && digitalRadio.checked && plan.checkbox) {
            if (e.target !== plan.checkbox) {
              plan.checkbox.checked = true
              plan.checkbox.dispatchEvent(new Event('change'))
            }
          }
        })
      }
    })

    // Initialize with digital plan
    showPlan('digital')
  })
</script>
